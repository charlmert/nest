<salsa behavioral profiler> - bash history

[bash history capturing] - (see depends/bash_log_all_history.sh)
Thanks to this guy: http://www.cuberick.com/2008/11/update-bash-history-in-realtime.html
I can now maintain bash history accross terminals and have users with bash as their terminal
listed as instructors to salsa.

Through this meta description the bash shell can be viewed as an instructor to salsa using
the ~/.bash_history as a watch point. If salsa can't access or view the watch points for any
reason the lesson is over until it can.

Enabling salsa to analyze bash output requires the bash history to be updated in real time
as soon as a command is executed. The results of execution also need to be captured for
salsa to analyze.

[silent command output capturing] - (see depends/bash_silent_output_redirection.sh)

research> redirecting stderr and stdout to a file and tty similtaneously
					use tty to provide a handle to the current terminal
					capture stderr and stdout to a file, cat that file to the tty

This will enable the terminal to pass the instructors exam (implentation adhearance)
and efectively become a salsa instructor. i.e. 
current instructor spec:
 - watch point (result output) as a text log updated in realtime.
 - watch point (stats output) bash behavior output in the form of silent output redirection.
 - conform to the pebble spec of itself being node compatible or team
   player capable of producing output in other neural networks.

[teaching salsa how to build a symfony app]
Use Case / Dance Move 1: (use cases will form the "do once, never again knowledge base called dancemoves")
Simple installation of Symfony could be done once and never again.
you type in a series of commands (luckily it's possible to go very far in the console with symfony
to create your web app) to create or generate your web app.

The goal is to have salsa capture every part of this (short of being a privacy sensitive key logger)
and have relative paths/steps/requirements (short of a debug memory dump/environment snapshot) captured,
tagged according to a taxonomy system and have the entire symfony app creation process reproduced non-interactively
and automatically by entering a few labels into an octoplasm pebble.

[use case legend]
INIT: the starting point with an environmental snapshot including loosley tied operating system version, bash version
      with the goal to attempt and install to capture output to be analyzed for an accurate assesment of what the
      actual support for the current environment snapshot is. (the goal being to constantly harvest statistical information
      about any and all dependancies and their differences in order to provide points to weights when implementing certain
      solutions or networks). loosely tied because salsa should attempt if versions are within an expected standard
      deviation to what environment this build process would work on.

COMMAND: the initial command entry point leading to the first output generated.
				 all the commands and parameters should be captured by salsa and variations
         of usage. the format and assignment and expected types should also be learnt
         by salsa as the ./console instructor teaches with it's weighable output.

OUTPUT: the output generated by the execution of the most recent command.

research> notes indicating that a specific area should be reseached to build salsa, for now this should only 
					indicate some form of specification to the developer. Will be automatable on subsequent phases of time
				  sieries analyzed results.

OUTPUT ANALYSIS: indicates that output from a previous command underwent analysis and will be used to form
                 any subsequent result.

RESULT PARAMETER: the parameters amended or explicitly used after output analysis, specifically command usage analysis.

RESULT COMMAND: the resulting command after output analysis. to be run to produce new output for analysis.
                if analysis resulting in a repeated signature match, i.e. yielding the same results for a certain
                amount of retries or exhausting every possible combination of parameters for the command; the
                output should be flagged for manual function/algorithim management.

NOTE: a note only for human consumption. or to be used as commentary for hubot. Should build/check functionality into/of hubot
      to be dynamically, contextually aware for certain commentry. 
			e.g. resulting in a

EXPECTED OUTPUT: the output goal of the neural network. the nodes/pebbles (see octoplasm/README) in the net should 
 								 produce a collective output targeted towards obtaining the expected result. if the expected result
                 is not obtained the pebbles should be trained through output analysis (automated backwards propagation)
                 and the last good command in the chain should be retried.
                 
(see cases/build-symfony-web-app.txt)
